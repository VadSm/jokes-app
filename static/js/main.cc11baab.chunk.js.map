{"version":3,"sources":["store/actions/jokes.ts","store/reducers/jokes.ts","store/index.js","store/selectors/jokes.ts","store/thunks/jokes.ts","components/ui/Wrapper.tsx","components/ui/Icon.tsx","components/ui/Header.tsx","components/ui/Button.tsx","components/ui/LoadingSkeleton.tsx","components/JokeCard.tsx","components/JokeContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["setLoading","payload","type","initialState","jokeData","isLoading","rootReducer","combineReducers","jokes","state","configureStore","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","getJokeData","getLoadingStatus","getJokeRequest","dispatch","axios","get","then","data","catch","err","console","error","finally","Wrapper","children","customClassName","className","Icon","iconPath","title","style","backgroundImage","iconTypes","React","memo","randomIcon","Math","floor","random","length","Button","text","btnProps","LoadingSkeleton","iconTypesData","Miscellaneous","Programming","Dark","JokeCard","category","setup","delivery","joke","renderCardContent","JokeContainer","useDispatch","useSelector","useEffect","handleClick","useCallback","onClick","App","store","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cc11baab.chunk.js","sourcesContent":["import { IJokeData } from 'types/joke-card';\n\nexport const SET_JOKE_DATA = 'jokes/SET_JOKE_DATA';\nexport const SET_LOADING = 'jokes/SET_LOADING';\n\ninterface SetJokeDataAction {\n  type: typeof SET_JOKE_DATA;\n  payload: IJokeData;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n  payload: boolean;\n}\n\nexport const setJokeData = (payload: IJokeData): SetJokeDataAction => ({\n  type: SET_JOKE_DATA,\n  payload,\n});\n\nexport const setLoading = (payload: boolean): SetLoadingAction => ({\n  type: SET_LOADING,\n  payload,\n});\n\nexport type JokesActionTypes = SetJokeDataAction | SetLoadingAction;\n","import { IJokeData } from 'types/joke-card';\nimport { SET_JOKE_DATA, SET_LOADING, JokesActionTypes } from 'store/actions/jokes';\n\nexport interface IJokesState {\n  jokeData: IJokeData | null;\n  isLoading: boolean;\n}\n\nconst initialState: IJokesState = {\n  jokeData: null,\n  isLoading: false,\n};\n\nexport default (state = initialState, { type, payload }: JokesActionTypes) => {\n  switch (type) {\n    case SET_JOKE_DATA:\n      return {\n        ...state,\n        jokeData: payload,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        isLoading: payload,\n      };\n    default:\n      return state;\n  }\n};\n","/* eslint-disable no-underscore-dangle */\nimport {\n  createStore,\n  applyMiddleware,\n  compose,\n  combineReducers,\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport jokes from 'store/reducers/jokes';\n\nconst rootReducer = combineReducers({\n  jokes,\n});\n\nconst configureStore = () => {\n  const store = createStore(\n    rootReducer,\n    compose(\n      applyMiddleware(thunk),\n      // eslint-disable-next-line no-undef\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n    ),\n  );\n\n  return store;\n};\n\nexport default configureStore();\n","import IRootState from 'store/reducers/rootState';\n\nexport const getJokeData = ({ jokes }: IRootState) => jokes.jokeData;\nexport const getLoadingStatus = ({ jokes }: IRootState) => jokes.isLoading;\n","import { setJokeData, setLoading, JokesActionTypes } from 'store/actions/jokes';\nimport axios from 'axios';\nimport { Dispatch as IDispatch } from 'redux';\n\nconst getJokeRequest = () => (\n  (dispatch: IDispatch<JokesActionTypes>) => {\n    dispatch(setLoading(true));\n\n    axios.get('https://sv443.net/jokeapi/v2/joke/Any')\n      .then(({ data }) => dispatch(setJokeData(data)))\n      .catch(err => console.error(err))\n      .finally(() => dispatch(setLoading(false)));\n  }\n);\n\nexport default getJokeRequest;\n","import React from 'react';\n\ninterface IProps {\n  children: React.ReactNode | null;\n  className?: string;\n}\n\nconst Wrapper = ({ children, className: customClassName }: IProps) => (\n  <div className={`wrapper ${customClassName || ''}`}>\n    {children}\n  </div>\n);\n\nexport default Wrapper;\n","import React from 'react';\n\ninterface IProps {\n  iconPath: string;\n  className?: string;\n  title?: string;\n}\n\nconst Icon = ({ className: customClassName, iconPath, title }: IProps) => (\n  <div\n    className={`custom-icon ${customClassName || ''}`}\n    style={{ backgroundImage: `url(${iconPath})` }}\n    title={title}\n  />\n);\n\nexport default Icon;\n","import React from 'react';\n\nimport Wrapper from 'components/ui/Wrapper';\nimport Icon from 'components/ui/Icon';\n\nconst iconTypes = [\n  '/icons/fuck.png',\n  '/icons/joker.png',\n  '/icons/clown.png',\n];\n\nconst Header = () => {\n  const randomIcon = iconTypes[Math.floor(Math.random() * iconTypes.length)];\n\n  return (\n    <header className=\"custom-header\">\n      <Wrapper>\n        <Icon iconPath={randomIcon} className=\"header-icon\" />\n        <span>Get a joke</span>\n      </Wrapper>\n    </header>\n  );\n};\n\nexport default React.memo(Header);\n","import React from 'react';\n\ninterface IProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: string | React.ReactNode;\n  customClassName?: string;\n}\n\nconst Button = ({ children: text, customClassName, ...btnProps }: IProps) => (\n  <button\n    type=\"button\"\n    className={`custom-button ${customClassName || ''}`}\n    {...btnProps}\n  >\n    {text}\n  </button>\n);\n\nexport default Button;\n","import React from 'react';\n\nconst LoadingSkeleton = () => (\n  <div className=\"loading-skeleton\">\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default LoadingSkeleton;\n","import React from 'react';\nimport { IJokeData } from 'types/joke-card';\n\nimport Icon from 'components/ui/Icon';\nimport LoadingSkeleton from 'components/ui/LoadingSkeleton';\n\nconst iconTypesData = {\n  Miscellaneous: '/icons/monkey.png',\n  Programming: '/icons/programmer.png',\n  Dark: '/icons/devil.png',\n};\n\nconst renderCardContent = ({\n  category,\n  type,\n  setup,\n  delivery,\n  joke,\n}: IJokeData) => (\n  <>\n    <Icon\n      className=\"joke-type-icon\"\n      iconPath={iconTypesData[category]}\n      title={category}\n    />\n    {type === 'twopart' ? (\n      <>\n        <p>{setup}</p>\n        <p>{delivery}</p>\n      </>\n    ) : <p>{joke}</p>}\n  </>\n);\n\ninterface IProps {\n  jokeData: IJokeData | null;\n  isLoading: boolean;\n}\n\nconst JokeCard: React.FC<IProps> = ({\n  jokeData,\n  isLoading,\n}) => (\n  <div className=\"joke-card\">\n    {isLoading ? (\n      <LoadingSkeleton />\n    ) : (\n      jokeData && renderCardContent(jokeData)\n    )}\n  </div>\n);\n\nexport default JokeCard;\n","import React, { useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getJokeData, getLoadingStatus } from 'store/selectors/jokes';\nimport getJokeRequest from 'store/thunks/jokes';\n\nimport Header from 'components/ui/Header';\nimport Button from 'components/ui/Button';\nimport Wrapper from 'components/ui/Wrapper';\nimport JokeCard from 'components/JokeCard';\n\nconst JokeContainer = () => {\n  const dispatch = useDispatch();\n  const jokeData = useSelector(getJokeData);\n  const isLoading = useSelector(getLoadingStatus);\n\n  useEffect(() => {\n    dispatch(getJokeRequest());\n  }, [dispatch]);\n\n  const handleClick = useCallback(() => {\n    dispatch(getJokeRequest());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Header />\n      <Wrapper className=\"joke-wrapper\">\n        <JokeCard jokeData={jokeData} isLoading={isLoading} />\n        <Button onClick={handleClick}>One more</Button>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default JokeContainer;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from 'store';\n\nimport JokeContainer from 'components/JokeContainer';\n\nconst App = () => (\n  <Provider store={store}>\n    <div className=\"App\">\n      <JokeContainer />\n    </div>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}